// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	domain "code-typing-text-service/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// CodeExampleRepository is an autogenerated mock type for the CodeExampleRepository type
type CodeExampleRepository struct {
	mock.Mock
}

// DeleteCodeExample provides a mock function with given fields: UUID
func (_m *CodeExampleRepository) DeleteCodeExample(UUID string) error {
	ret := _m.Called(UUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCodeExample")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(UUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCodeExampleByUUID provides a mock function with given fields: UUID
func (_m *CodeExampleRepository) GetCodeExampleByUUID(UUID string) (domain.CodeExample, error) {
	ret := _m.Called(UUID)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeExampleByUUID")
	}

	var r0 domain.CodeExample
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.CodeExample, error)); ok {
		return rf(UUID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.CodeExample); ok {
		r0 = rf(UUID)
	} else {
		r0 = ret.Get(0).(domain.CodeExample)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(UUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCodeExamples provides a mock function with given fields: userID
func (_m *CodeExampleRepository) GetCodeExamples(userID string) []domain.CodeExample {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeExamples")
	}

	var r0 []domain.CodeExample
	if rf, ok := ret.Get(0).(func(string) []domain.CodeExample); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CodeExample)
		}
	}

	return r0
}

// GetCodeExamplesByProgrammingLanguageName provides a mock function with given fields: userID, programmingLanguageName
func (_m *CodeExampleRepository) GetCodeExamplesByProgrammingLanguageName(userID string, programmingLanguageName string) ([]domain.CodeExample, error) {
	ret := _m.Called(userID, programmingLanguageName)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeExamplesByProgrammingLanguageName")
	}

	var r0 []domain.CodeExample
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]domain.CodeExample, error)); ok {
		return rf(userID, programmingLanguageName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []domain.CodeExample); ok {
		r0 = rf(userID, programmingLanguageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CodeExample)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, programmingLanguageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProgrammingLanguages provides a mock function with given fields:
func (_m *CodeExampleRepository) GetProgrammingLanguages() []domain.ProgrammingLanguage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProgrammingLanguages")
	}

	var r0 []domain.ProgrammingLanguage
	if rf, ok := ret.Get(0).(func() []domain.ProgrammingLanguage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProgrammingLanguage)
		}
	}

	return r0
}

// SaveCodeExample provides a mock function with given fields: codeExample
func (_m *CodeExampleRepository) SaveCodeExample(codeExample domain.CodeExample) (string, error) {
	ret := _m.Called(codeExample)

	if len(ret) == 0 {
		panic("no return value specified for SaveCodeExample")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CodeExample) (string, error)); ok {
		return rf(codeExample)
	}
	if rf, ok := ret.Get(0).(func(domain.CodeExample) string); ok {
		r0 = rf(codeExample)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.CodeExample) error); ok {
		r1 = rf(codeExample)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCodeExampleRepository creates a new instance of CodeExampleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCodeExampleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CodeExampleRepository {
	mock := &CodeExampleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
